# -*- coding: utf-8 -*-
"""Descriminator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13Y4_8jGdgcGmKQ4ImF8eFM0TtxXMUfS2
"""

from tensorflow.keras.models import Model
from tensorflow.keras.layers import Conv2D, Input, Dense, LeakyReLU
from tensorflow.keras.layers import BatchNormalization, Activation
from tensorflow.keras.optimizers import Adam

class build_descriminator:

  def __init__(self,patch_size):
    self.path_size = patch_size
    self.filters = [64, 128, 128, 256, 256, 512, 512]
    self.strides = [2, 1, 2, 1, 1, 1, 1]



  def build_descriminator(self):

    HR = Input(shape = (self.patch_shape, self.patch_shape,3),
               name = 'LR Input')
    
    x = Conv2D(filters = 64, kernel_size = (3,3), 
               strides = (1,1), activation = LeakyReLU(),
               name = 'Convolution Layer 1')(HR)
    
    for n in range(self.num_blocks):
      x = Conv2D(filters = self.filters[i], kernel_size = (3,3),
                 strides = self.strides[i], activation = LeakyReLu(),
                 name = 'Convolution Layer {}'.format(n+1))(x)
      
      x = BatchNormalization(momentum)(0.8)(x)
    
    x = Dense(self.filters[-1]*2, name = 'Dense Layer')(x)
    x = LeakyReLU(alpha = 0.2)(x)
    x = Dense(1, name = 'Final Layer')(x)

    prediction = Activation('sigmoid')(x)

    return Model(inputs = HR, outputs = prediction)